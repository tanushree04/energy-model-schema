openapi: 3.0.0
info:
  version: 0.0.1
  title: pollination.cloud API
  termsOfService: 'https://pollination.cloud/terms'
  contact:
    email: hello@pollination.solutions
  license:
    name: AGPL
    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'
  x-logo:
    url: 'https://user-images.githubusercontent.com/2915573/53690998-7239bb00-3d43-11e9-85b1-d9ac9d140c0f.png'
  description: ''
externalDocs:
  description: Find out more about Pollination Cloud.
  url: 'https://www.pollination.cloud'
servers:
  - url: 'http://api.pollination.cloud'
tags:
  - name: Sensor Grid
    description: |
      Sensor Grid is a collection of sensors for grid-based studies.
  - name: Model
    description: |
      Models includes geometrical information as well as materials, constructions,
      and boundary conditions to describe a simulation model for daylight and energy
      and CFD modeling.
  - name: Simulation
    description: |
      Simulation in Pollination is an executable recipe which has a set of predefined
      instruction to execute specfic set of commands. In the near future all the recipes
      in Ladybug Tools plugins will be available as Pollination simulations.
  - name: Workflow
    description: |
      Workflow is a collection of usually interrelated simulations. Simulations will be
      executed in steps or in parallel based on interdependencies between simulations.
security:
  - JWT: []
paths:
  /models:
    post:
      tags:
        - Model
      summary: Create a model
      description: Create a new Pollination model.
      operationId: create_model
      requestBody:
        $ref: '#/components/requestBodies/Model'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '406':
          $ref: '#/components/responses/Invalid'
        '415':
          $ref: '#/components/responses/Unsupported'
    get:
      tags:
        - Model
      summary: Get models
      description: Retrieve a list of models.
      operationId: get_models
      responses:
        '200':
          $ref: '#/components/responses/RetrivedModels'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/models/{id}':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Model
      summary: Get a model
      description: Retrieve a model with specified identifier.
      operationId: get_model
      responses:
        '102':
          $ref: '#/components/responses/InProcessModel'
        '200':
          description: Retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedModel'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
    delete:
      tags:
        - Model
      summary: Delete a model
      description: Delete a model with predefined identifier string
      operationId: del_model
      responses:
        '204':
          $ref: '#/components/responses/Succeed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Refused'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/models/{id}/dynamic-faces':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Model
      summary: Get dynamic faces
      description: 'Retrieve dynamic faces of an existing model (`#experimental`).'
      operationId: get_dynamic_faces
      responses:
        '200':
          description: Retrieved
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DynamicModel'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/models/{id}/faces':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Model
      summary: Get faces
      description: Retrieve faces of an existing model as ModelFaces.
      operationId: get_faces
      responses:
        '200':
          description: Retrieved
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ModelFace'
                    - $ref: '#/components/schemas/ModelAperture'
                    - $ref: '#/components/schemas/ModelShadeFace'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/models/{id}/logs':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 50
        description: Number of items per page
        required: false
    get:
      tags:
        - Model
      summary: Get logs
      description: |
        Retrieve logs for this model. The logs are generated during the process of input
        model.
      operationId: get_model_logs
      responses:
        '200':
          description: Retrieved
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/models/{id}/rad-modifiers':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Model
      summary: Get radiance modifiers
      description: Retrieve radiance modifiers of an existing model.
      operationId: get_rad_modifiers
      responses:
        '200':
          description: Retrieved
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/Plastic'
                    - $ref: '#/components/schemas/Glass'
                    - $ref: '#/components/schemas/Opaque'
                    - $ref: '#/components/schemas/Transparent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/models/{id}/vertices':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 200
        description: Number of items per page
        required: false
    get:
      tags:
        - Model
      summary: Get veritces
      description: Retrieve veritces of an existing model.
      operationId: get_vertices
      responses:
        '200':
          description: Retrieved
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vertex'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  /sensor-grids:
    post:
      tags:
        - Sensor Grid
      summary: Create a sensor grid
      description: |
        Create a new grid of sensors.
      operationId: create_sensor_grids
      requestBody:
        $ref: '#/components/requestBodies/SensorGrid'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '406':
          $ref: '#/components/responses/Invalid'
        '415':
          $ref: '#/components/responses/Unsupported'
    get:
      tags:
        - Sensor Grid
      summary: Get sensor grids
      description: |
        Retrieve a list of sensor grids.
      operationId: get_sensor_grids
      responses:
        '200':
          description: Retrived
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedSensorGrid'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/sensor-grids/{id}':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Sensor Grid
      summary: Get a sensor grid
      description: |
        Retrieve a sensor grid with specified identifier.
      operationId: get_sensor_grid
      responses:
        '200':
          description: Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedSensorGrid'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
    delete:
      tags:
        - Sensor Grid
      summary: Delete a sensor grid
      description: |
        Delete a sensor grid with predefined identifier string
      responses:
        '204':
          $ref: '#/components/responses/Succeed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Refused'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/sensor-grids/{id}/sensors':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Sensor Grid
      summary: Get sensors
      description: |
        Retrieve list of sensors for a sensor grid. See Header Location for paging links.
      operationId: get_sensors
      responses:
        '200':
          description: Retrived
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  /simulations:
    post:
      tags:
        - Simulation
      summary: Create a simulation
      description: Create a new Pollination simulation.
      operationId: create_simulation
      requestBody:
        $ref: '#/components/requestBodies/Simulation'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '406':
          $ref: '#/components/responses/Invalid'
        '415':
          $ref: '#/components/responses/Unsupported'
    get:
      tags:
        - Simulation
      summary: Get simulations
      description: Retrieve a list of simulations.
      operationId: get_simulations
      responses:
        '200':
          $ref: '#/components/responses/RetrivedSimulations'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/simulations/{id}':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Simulation
      summary: Get a simulation
      description: |
        Retrieve a simulation with detailed information about specification and status of
        simulation.
      operationId: get_simulation
      responses:
        '102':
          description: Processing.
          headers:
            Retry-After:
              schema:
                type: integer
                default: 30
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DaylightFactor'
                  - $ref: '#/components/schemas/PointInTime'
        '200':
          description: Retrieved.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DaylightFactor'
                  - $ref: '#/components/schemas/PointInTime'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
    delete:
      tags:
        - Simulation
      summary: Delete a simulation
      description: |
        Delete a simulation and stop all the running tasks if any. For canceling a running
        simulation you should use actions.
      operationId: del_simulation
      responses:
        '204':
          $ref: '#/components/responses/Succeed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Refused'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/simulations/{id}/actions':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    put:
      tags:
        - Simulation
      summary: Control a simulation
      description: Start or stop execution of a simulation.
      operationId: control_simulation
      requestBody:
        $ref: '#/components/requestBodies/Action'
      responses:
        '204':
          $ref: '#/components/responses/Succeed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Refused'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/simulations/{id}/logs':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Simulation
      summary: Get simulation logs
      description: Retrieve logs for this simulation.
      operationId: get_simulation_logs
      responses:
        '200':
          description: Retrieved
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/simulations/{id}/outputs':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    post:
      tags:
        - Simulation
      summary: Request simulation output
      description: Request a simulation output.
      operationId: request_simulation_output
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '406':
          $ref: '#/components/responses/Invalid'
        '415':
          $ref: '#/components/responses/Unsupported'
  '/simulations/{id}/outputs/{output-id}':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: path
        name: output-id
        description: Unique id for desired output
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Simulation
      summary: Get simulation output
      description: |
        Retrieve simulation output. The results will be an an array of results. The schema
        will be different based on outputs.
      operationId: get_simulation_output
      responses:
        '102':
          description: Processing
          headers:
            Retry-After:
              schema:
                type: integer
                default: 60
        '200':
          description: Retrived
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /workflows:
    post:
      tags:
        - Workflow
      summary: Create a workflow
      description: Create a new Pollination workflow.
      operationId: create_workflow
      requestBody:
        $ref: '#/components/requestBodies/Workflow'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '406':
          $ref: '#/components/responses/Invalid'
        '415':
          $ref: '#/components/responses/Unsupported'
    get:
      tags:
        - Workflow
      summary: Get workflows
      description: Retrieve a list of workflows.
      operationId: get_workflows
      responses:
        '200':
          $ref: '#/components/responses/RetrivedWorkflows'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/workflows/{id}':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Workflow
      summary: Get a workflow
      description: |
        Retrieve a workflow with detailed information about specification and status of
        workflow.
      operationId: get_workflow
      responses:
        '200':
          description: Retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
    delete:
      tags:
        - Workflow
      summary: Delete a workflow
      description: |
        Delete a workflow and stop all the running tasks if any. For canceling a running
        workflow you should use actions.
      operationId: del_workflow
      responses:
        '204':
          $ref: '#/components/responses/Succeed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Refused'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/workflows/{id}/actions':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    put:
      tags:
        - Workflow
      summary: Control a workflow
      description: |
        Start or stop execution of a workflow. The action will be applied to all the workflow
        simulations.
      operationId: control_workflow
      requestBody:
        $ref: '#/components/requestBodies/Action'
      responses:
        '204':
          $ref: '#/components/responses/Succeed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Refused'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
  '/workflows/{id}/logs':
    parameters:
      - in: path
        name: id
        description: Unique resource id
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number
        required: false
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        description: Number of items per page
        required: false
    get:
      tags:
        - Workflow
      summary: Get workflow logs
      description: Retrieve cumulative logs for all simulations in a workflow.
      operationId: get_workflow_logs
      responses:
        '200':
          description: Retrieved
          headers:
            Link:
              $ref: '#/components/headers/LinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/Invalid'
components:
  schemas:
    EnergyPlusConstruction:
      description: Place-holder for EnergyPlus constructions.
      type: string
    Zone:
      description: Place-holder for EnergyPlus zone.
      type: object
    LinkedSensorGrid:
      type: object
      description: A flattened collection of sensors for grid-based studies.
      required:
        - type
        - sensors
        - sensor_count
        - id
      properties:
        type:
          type: string
          enum:
            - SensorGrid
        sensor_count:
          description: Number of total sensors.
          type: integer
        id:
          description: Grid id.
          type: string
          format: uuid
          readOnly: true
        name:
          $ref: '#/components/schemas/ValidString'
        sensors_url:
          description: link to sensors.
          type: string
      example:
        type: SensorGrid
        id: 1234-567-3344-99
        sensor_count: 20000
        name: example_grid
        sensors_url: api.pollination.cloud/1234-567-3344-99/sensors
    Sensor:
      description: |
        A single sensor. The first 3 values indicate the locaion and
        the second 3 valuse indicate the direction of the sensor.
      type: array
      items:
        type: number
        format: double
      minItems: 6
      maxItems: 6
      example:
        - 0
        - 0
        - 0
        - 0
        - 0
        - 1
    SensorGrid:
      type: object
      description: A flattened collection of sensors for grid-based studies.
      required:
        - type
        - sensors
        - sensor_count
        - id
      properties:
        type:
          type: string
          enum:
            - SensorGrid
        sensor_count:
          description: Number of total sensors.
          type: integer
        name:
          $ref: '#/components/schemas/ValidString'
        sensors:
          description: A flattened array of sensors.
          type: array
          items:
            $ref: '#/components/schemas/Sensor'
      example:
        type: SensorGrid
        sensor_count: 4
        name: example_grid
        sensors:
          - - 0
            - 0
            - 0
            - 0
            - 0
            - 1
          - - 0
            - 0
            - 0
            - 0
            - 1
            - 0
          - - 0
            - 1
            - 1.2
            - 0
            - 0
            - 1
          - - 0
            - 1
            - 1.2
            - 0
            - 1
            - 0
    Aperture:
      type: object
      description: |
        A static Aperture Schema. An aperture is the entry point of sky light or sunlight to
        space. For dynamic apertures use DynamicModel Schema.
        NOTE: All EnergyPlus Extrior fenestration objects are apertures.
      required:
        - type
        - face_type
        - parent
      allOf:
        - properties:
            type:
              type: string
              enum:
                - Aperture
            face_type:
              description: Face type = `Window`.
              type: string
              enum:
                - Window
            blinds:
              description: A collection of blind geometries for this aperture.
              type: array
              items:
                $ref: '#/components/schemas/ShadeFace'
            parent:
              description: Parent Face information.
              type: object
              required:
                - name
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                type:
                  type: string
                  enum:
                    - face
        - $ref: '#/components/schemas/FaceBase'
        - $ref: '#/components/schemas/Attributes'
    Apertures:
      type: object
      description: |
        An array of static Apertures. This is useful to add multiple Aperture to a single Face.
      properties:
        type:
          type: string
          enum:
            - Apertures
        apertures:
          type: array
          items:
            $ref: '#/components/schemas/Aperture'
    ApertureWWR:
      description: |
        An Aperture defined based on window to wall ratio. This aperture will be converted to
        an Aperture schema.
      type: object
      required:
        - wwr
        - type
      properties:
        type:
          type: string
          enum:
            - ApertureWWR
        wwr:
          type: number
          minimum: 0
          maximum: 99
          default: 0
    Attributes:
      type: object
      description: Face attributes.
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/ValidString'
        rad_modifier:
          oneOf:
            - $ref: '#/components/schemas/Opaque'
            - $ref: '#/components/schemas/Transparent'
            - $ref: '#/components/schemas/Plastic'
            - $ref: '#/components/schemas/Glass'
        rad_modifier_dir:
          oneOf:
            - $ref: '#/components/schemas/Opaque'
            - $ref: '#/components/schemas/Transparent'
            - $ref: '#/components/schemas/Plastic'
            - $ref: '#/components/schemas/Glass'
        ep_construction:
          $ref: '#/components/schemas/EnergyPlusConstruction'
    DynamicModel:
      type: object
      description: A Dynamic Model with one or more states.
      required:
        - states
        - name
        - type
        - is_aperture
      properties:
        type:
          type: string
          enum:
            - DynamicModel
        id:
          $ref: '#/components/schemas/UUID'
        name:
          description: Name for this face.
          type: string
          pattern: '^[.A-Za-z0-9_-]*$'
        is_aperture:
          description: |
            A boolean that indicates if this state represents an aperture in building. An
            aperture can see the source of light (sky or sun) directly. For interior windows
            this value will be False. Non-aperture openings won't be considered as a separate
            source of light in calculation and will be treated as go-through windows.
          type: boolean
          default: true
        states:
          description: A collection of States.
          type: array
          items:
            $ref: '#/components/schemas/ModelState'
        schedule:
          description: An optional schedule for states.
          type: array
          items:
            description: index for state at that time-step.
            type: integer
    Face:
      type: object
      description: A single planar face
      required:
        - type
      allOf:
        - properties:
            type:
              type: string
              enum:
                - Face
        - $ref: '#/components/schemas/FaceGeometry'
        - $ref: '#/components/schemas/Attributes'
    FaceBase:
      type: object
      description: Basic schema for all Face schemas.
      required:
        - vertices
      properties:
        id:
          $ref: '#/components/schemas/UUIDReadOnly'
        vertices:
          description: A collection of vertices.
          type: array
          items:
            $ref: '#/components/schemas/Vertex'
          minItems: 3
          example:
            - - 0
              - 0
              - 0
            - - 10
              - 0
              - 0
            - - 10
              - 10
              - 0
        face_type:
          description: |
            Face type. `Wall`, `RoofCeiling`, `Floor`, `AirWall`. The type will be assigned
            based on face normal direction if not provided. For `AirWall`s you must set the
            type manually. For `Window` faces use `Aperture` field.
          type: string
          enum:
            - Wall
            - RoofCeiling
            - Floor
            - AirWall
        parent:
          description: Parent zone information.
          type: object
          required:
            - name
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            type:
              type: string
              enum:
                - zone
    FaceByFaceModel:
      type: object
      description: A collection of Faces to create a Pollination model.
      required:
        - type
        - faces
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - properties:
            type:
              type: string
              description: Object type.
              enum:
                - FaceByFaceModel
            faces:
              type: array
              items:
                type: object
                anyOf:
                  - $ref: '#/components/schemas/Face'
                  - $ref: '#/components/schemas/PolyFace'
                  - $ref: '#/components/schemas/ShadeFace'
                  - $ref: '#/components/schemas/DynamicModel'
            zones:
              description: List of Zones in this model. Only useful for creating energy models.
              type: array
              items:
                $ref: '#/components/schemas/Zone'
    FaceFlattened:
      type: object
      description: |
        A flattened definition of single planar face. There is no nested apertures in a
        flattened face.
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/FaceBase'
        - $ref: '#/components/schemas/Attributes'
        - properties:
            type:
              type: string
              enum:
                - FaceFlattened
            vertices_ext:
              description: |
                Extended list of indexes for vertices which includes child faces like windows.
                This list should be flattened and include the corner vertices. This is also
                known as face profile. For radiance model vertices_ext will be checked first
                and vertices will be used only if vertices_ext is not provided.
              type: array
              items:
                $ref: '#/components/schemas/Vertex'
              minItems: 8
    FaceGeometry:
      type: object
      description: |
        Face geometry with apertures but with no attributes. This face type is useful for
        creating PolyFaces.
      allOf:
        - $ref: '#/components/schemas/FaceBase'
        - properties:
            aperture:
              oneOf:
                - $ref: '#/components/schemas/Aperture'
                - $ref: '#/components/schemas/Apertures'
    InProcessModel:
      type: object
      description: Pollination model when is still being processed.
      readOnly: true
      properties:
        convert_to_meters:
          type: number
          default: 1
        name:
          $ref: '#/components/schemas/ValidString'
        id:
          $ref: '#/components/schemas/UUID'
        url:
          description: Link to this model (self).
          type: string
          format: url
        history:
          type: array
          items:
            type: object
            properties:
              status:
                enum:
                  - Submitted
              timestamp:
                $ref: '#/components/schemas/TimeStamp'
        logs:
          description: Link to related logs to this model.
          type: string
          format: url
      example:
        convert_to_meters: 1
        name: string
        id: 123e4567-e89b-12d3-a456-426655440000
        url: 'https://api.pollination.cloud/models/123e4567-e89b-12d3-a456-426655440000'
        history:
          - status: Submitted
            timestamp: '2019-03-11T18:47:13Z'
        logs: 'https://api.pollination.cloud/models/123e4567-e89b-12d3-a456-426655440000/logs'
    LinkedModel:
      type: object
      description: Pollination model.
      readOnly: true
      properties:
        convert_to_meters:
          type: number
          default: 1
        name:
          $ref: '#/components/schemas/ValidString'
        id:
          $ref: '#/components/schemas/UUID'
        url:
          description: Link to this model (self).
          type: string
          format: url
        history:
          type: array
          items:
            $ref: '#/components/schemas/ModelEvent'
        logs:
          description: Link to related logs to this model.
          type: string
          format: url
        vertices:
          type: object
          properties:
            count:
              description: Number of vertices.
              type: integer
            url:
              description: URL to access model vertices.
              type: string
        rad_modifiers:
          type: object
          properties:
            count:
              description: Number of modifiers.
              type: integer
            url:
              description: URL to access Radiance modifiers in this model.
              type: string
        faces:
          type: object
          properties:
            count:
              description: Number of faces.
              type: integer
            url:
              description: |
                URL to access modelfaces in this model. ModelFaces reference
                to vertices and rad_modifiers in model.
              type: string
        dynamic_faces:
          type: object
          properties:
            count:
              description: Number of faces.
              type: integer
            url:
              description: URL to access model dynamic faces.
              type: string
      example:
        convert_to_meters: 1
        name: string
        id: 123e4567-e89b-12d3-a456-426655440000
        url: 'https://api.pollination.cloud/models/123e4567-e89b-12d3-a456-426655440000'
        history:
          - status: Submitted
            timestamp: '2019-03-11T18:47:13Z'
          - status: Created
            timestamp: '2019-03-11T18:50:16Z'
        logs: 'https://api.pollination.cloud/models/123e4567-e89b-12d3-a456-426655440000/logs'
        vertices:
          count: 200
          url: 'https://api.pollination.cloud/models/123e4567-e89b-12d3-a456-426655440000/vertices'
        rad_modifiers:
          count: 13
          url: 'https://api.pollination.cloud/models/123e4567-e89b-12d3-a456-426655440000/rad_modifiers'
        faces:
          count: 65
          url: 'https://api.pollination.cloud/models/123e4567-e89b-12d3-a456-426655440000/faces'
        dynamic_faces:
          count: 0
          url: 'https://api.pollination.cloud/models/123e4567-e89b-12d3-a456-426655440000/dynamic_faces'
    Model:
      type: object
      description: |
        A full-fledge Pollination model. Pollination model is translatable to energy, daylight
        and CFD models. The current version only supports daylight simulation.
      required:
        - type
        - vertices
        - faces
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - properties:
            type:
              type: string
              description: Object type.
              enum:
                - Model
            vertices:
              description: 'An ordered, flattened list of unique vertices.'
              type: array
              uniqueItems: true
              minItems: 3
              items:
                $ref: '#/components/schemas/Vertex'
            faces:
              description: |
                A flattened list of ModelFaces. A ModelFace can represent an opaque face,
                an aperture or a shading face.
              type: array
              items:
                type: object
                anyOf:
                  - $ref: '#/components/schemas/ModelFace'
                  - $ref: '#/components/schemas/ModelAperture'
                  - $ref: '#/components/schemas/ModelShadeFace'
            dynamic_faces:
              description: |
                A list of dynamic models. `#experimental`
              type: array
              items:
                $ref: '#/components/schemas/DynamicModel'
            rad_modifiers:
              description: |
                A list of unique radiance modifiers. In most cases modifiers are radiance
                materials but pollination supports other modifiers as well.
                See http://radsite.lbl.gov/radiance/refer/ray.html#Surfaces
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Opaque'
                  - $ref: '#/components/schemas/Transparent'
                  - $ref: '#/components/schemas/Plastic'
                  - $ref: '#/components/schemas/Glass'
            zones:
              description: A list of Zones in this model.
              type: array
              items:
                $ref: '#/components/schemas/Zone'
            ep_constructions:
              description: A list of unique ep_constructions for energy simulation
              type: array
              items:
                $ref: '#/components/schemas/EnergyPlusConstruction'
    ModelAperture:
      type: object
      description: A single planar Static Aperture Face in Model
      allOf:
        - properties:
            type:
              type: string
              enum:
                - ModelAperture
            face_type:
              description: Face type = `Window`.
              type: string
              enum:
                - Window
        - $ref: '#/components/schemas/ModelFaceBase'
    ModelBase:
      type: object
      description: Shared properties for Pollination models.
      required:
        - convert_to_meters
        - id
        - name
      properties:
        convert_to_meters:
          description: |
            Scaling factor for the vertex coordinates to be in metrics. e.g. for a model in mm
            the value must be 0.001. 
          type: number
          default: 1
        id:
          $ref: '#/components/schemas/UUIDReadOnly'
        name:
          $ref: '#/components/schemas/ValidString'
    ModelEvent:
      description: Model event
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          description: Status of processing a model.
          type: string
          enum:
            - Submitted
            - Created
            - Modified
        timestamp:
          $ref: '#/components/schemas/TimeStamp'
    ModelFace:
      type: object
      description: A single planar Static Face in Model
      allOf:
        - properties:
            type:
              type: string
              enum:
                - ModelFace
            vertices_ext:
              description: |
                Extended list of indexes for vertices which includes child faces like
                windows. This list should be flattened and include the corner vertices.
                `vertices_ext` will be used for _Radiance_ models. For _energy_ models see
                `vertices`.
                ![profile](https://user-images.githubusercontent.com/2915573/40280635-db49dd9c-5c24-11e8-8be3-a4d3f4d95c4a.gif)
              type: array
              items:
                type: integer
                minItems: 8
        - $ref: '#/components/schemas/ModelFaceBase'
    ModelFaceBase:
      type: object
      description: A single planar Static Face in Model
      required:
        - vertices
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          $ref: '#/components/schemas/ValidString'
        vertices:
          description: |
            A collection of integers to reference the index of vertices in
            vertices.
          type: array
          items:
            type: integer
          minItems: 3
          example:
            - 0
            - 10
            - 5
            - 3
        face_type:
          description: |
            Face type. `Wall`, `RoofCeiling`, `Floor`, `AirWall`. The type will be assigned
            based on face normal direction if not provided. For `AirWall`s you must set the
            type manually. For `window` see `ModelAperture`.
          type: string
          enum:
            - Wall
            - RoofCeiling
            - Floor
            - AirWall
        parent:
          description: id of parent face or parent zone.
          type: object
          required:
            - name
            - type
          properties:
            id:
              $ref: '#/components/schemas/UUID'
            name:
              type: string
            type:
              type: string
              enum:
                - zone
                - face
        rad_modifier:
          description: |
            UUID of radiance modifier in radiance_modifiers. This modifier will be used as
            default material for this face. See rad_modifier_direct for optional modifier for
            direct studies. If empty the modifier will be assigned based on face type.
          type: string
          format: uuid
        rad_modifier_dir:
          description: UUID of radiance modifier in radiance_modifiers. This modifier will be used for direct sunlight calculations. Default is blacked rad_modifier.
          type: string
          format: uuid
        ep_construction:
          description: UUID of energy construction in model.ep_constructions.
          type: string
          format: uuid
    ModelShadeFace:
      type: object
      description: A static shading geometry Schema.
      allOf:
        - properties:
            type:
              type: string
              enum:
                - ModelShadeFace
            face_type:
              description: Face type = `Shading`.
              type: string
              enum:
                - Shading
        - $ref: '#/components/schemas/ModelFaceBase'
    ModelState:
      description: |
        State for a dynamic model. Most of the time a dynamic model is an apertures (window
        group).
      type: object
      required:
        - models
      properties:
        name:
          description: A unique name for this state.
          type: string
        models:
          type: object
          required:
            - default
          properties:
            default:
              description: |
                Default model to be used for normal raytracing recipes.
              type: object
              oneOf:
                - $ref: '#/components/schemas/Model'
                - $ref: '#/components/schemas/FaceByFaceModel'
            direct:
              description: |
                A model that will be used for direct studies. This model will be used in
                solar-access studies. Direct sunlight calculation in 2-Phase (2nd phase) and
                5-phase (5th phase). If you are using a BSDF material for direct studies it
                should be a high-resolution (e.g. tensortree) BSDF.
              type: object
              oneOf:
                - $ref: '#/components/schemas/Model'
                - $ref: '#/components/schemas/FaceByFaceModel'
            black:
              description: |
                Blacked out representation of this model. Blacked model will be used in studies
                with multiple dynamic apertures to remove the contribution of light from this
                aperture when the contribution from another aperture is being calculated.
              type: object
              oneOf:
                - $ref: '#/components/schemas/Model'
                - $ref: '#/components/schemas/FaceByFaceModel'
            tmtx:
              description: |
                Transmission matrix. A BSDF representation of the model for matrix-based
                calculations. This model will be used in matrix multiplication.
              type: string
            inmtx:
              description: |
                A glowed representation of the model for inward matrix calculations.
                In most cases inward matrix calculation is referred to as view matrix.
              type: object
              oneOf:
                - $ref: '#/components/schemas/Model'
                - $ref: '#/components/schemas/FaceByFaceModel'
            outmtx:
              description: |
                The representation of the model for outwards matrix
                calculations. outwards matrix calculation in most cases are referred to as
                daylight matrix.
              type: object
              oneOf:
                - $ref: '#/components/schemas/Model'
                - $ref: '#/components/schemas/FaceByFaceModel'
    PolyFace:
      type: object
      description: |
        A collection of Faces with shared vertices and same material.
      required:
        - type
      allOf:
        - properties:
            type:
              type: string
              enum:
                - PolyFace
            id:
              $ref: '#/components/schemas/UUID'
            faces:
              type: array
              items:
                $ref: '#/components/schemas/FaceGeometry'
        - $ref: '#/components/schemas/Attributes'
    ShadeFace:
      type: object
      description: A static shading geometry Schema.
      required:
        - type
      allOf:
        - properties:
            type:
              type: string
              enum:
                - ShadeFace
            face_type:
              description: Face type = `Shading`.
              type: string
              enum:
                - Shading
        - $ref: '#/components/schemas/FaceBase'
        - $ref: '#/components/schemas/Attributes'
    Space:
      type: object
      description: |
        An extruded closed Space. Use Room to create "SpaceBySpaceModel"s.
        This is enough for now but in the future we need to have FaceByFaceSpaces which is
        easier to use for energy models. 
      required:
        - type
        - profile
        - extrusion
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        type:
          type: string
          enum:
            - Space
        profile:
          description: List of vertices to define space's plan.
          type: array
          items:
            $ref: '#/components/schemas/Vertex'
          minItems: 3
        apertures:
          oneOf:
            - $ref: '#/components/schemas/Aperture'
            - $ref: '#/components/schemas/Apertures'
        extrusion:
          type: number
          minimum: 0
          exclusiveMinimum: false
    SpaceBySpaceModel:
      type: object
      description: A collection of Extruded Rooms to create a Pollination model.
      required:
        - type
        - spaces
      allOf:
        - $ref: '#/components/schemas/ModelBase'
        - properties:
            type:
              type: string
              description: Object type.
              enum:
                - SpaceBySpaceModel
            spaces:
              description: A collection of spaces.
              type: array
              items:
                $ref: '#/components/schemas/Space'
            shades:
              description: A collection of shading geometries.
              type: array
              items:
                $ref: '#/components/schemas/ShadeFace'
    Vertex:
      description: 'A single vertex as x, y, z.'
      type: array
      items:
        type: number
        format: double
      minItems: 3
      maxItems: 3
      example:
        - 0
        - 0
        - 0
    Average:
      type: object
      description: Schema for calculating average values for grid-based studies.
      allOf:
        - $ref: '#/components/schemas/GridBasedPostProcess'
    GridBasedPostProcess:
      description: Base schema for grid-based simulation workflows.
      type: object
      required:
        - grid_ids
        - depends_on
      allOf:
        - $ref: '#/components/schemas/Simulation'
        - properties:
            grid_ids:
              description: |
                A list of ids for sensor-grids. If used as part of simulation in after_success this
                value will be overwritten by sensor ids in that simulation.
              type: array
              items:
                $ref: '#/components/schemas/UUID'
            per_grid:
              description: |
                A Boolean to indicate if average should be calculated per sensor grid or for all
                the grids together. The value by default is true.
              type: boolean
              default: true
    InBetween:
      type: object
      description: Schema for calculating number of sensors between min and max values.
      allOf:
        - $ref: '#/components/schemas/GridBasedPostProcess'
        - properties:
            minimum:
              description: Minimum threshold value
              type: number
              format: double
            include_minimum:
              description: Set to true to include the minimum threshold itself.
              type: boolean
              default: false
            maximum:
              description: Maximum threshold value
              type: number
              format: double
            include_maximum:
              description: Set to true to include the maximum threshold itself.
              type: boolean
              default: false
    LargerThan:
      type: object
      description: Schema for calculating number of sensors with value larger than threshold.
      allOf:
        - $ref: '#/components/schemas/GridBasedPostProcess'
        - properties:
            threshold:
              description: Threshold value
              type: number
              format: double
            include_threshold:
              description: Set to true to include the threshold itself in calculation.
              type: boolean
              default: false
    SmallerThan:
      type: object
      description: Schema for calculating number of sensors with value smaller than threshold.
      allOf:
        - $ref: '#/components/schemas/LargerThan'
    Glass:
      type: object
      description: Radiance glass material.
      required:
        - type
        - r_transmittance
        - g_transmittance
        - b_transmittance
      allOf:
        - properties:
            type:
              type: string
              description: Material type
              enum:
                - Glass
            r_transmittance:
              type: number
              description: transmittance for red. The value should be between 0 and 1.
              minimum: 0
              maximum: 1
            g_transmittance:
              type: number
              description: transmittance for green. The value should be between 0 and 1.
              minimum: 0
              maximum: 1
            b_transmittance:
              type: number
              description: transmittance for blue. The value should be between 0 and 1.
              minimum: 0
              maximum: 1
            refraction:
              type: number
              description: Index of refraction. 1.52 for glass and 1.4 for ETFE
              default: 1.52
            modifier:
              description: Placeholder for modifier.
              type: string
              default: void
        - $ref: '#/components/schemas/MaterialBase'
    MaterialBase:
      type: object
      description: Base schema for Radiance materials.
      required:
        - type
        - name
      properties:
        type:
          type: string
          description: Material type
          enum:
            - MaterialBase
        name:
          $ref: '#/components/schemas/ValidString'
    Opaque:
      type: object
      description: Simplified Radiance opaque material.
      required:
        - reflectance
      allOf:
        - properties:
            type:
              type: string
              description: Material type
              enum:
                - Opaque
            reflectance:
              type: number
              description: Material reflectance. The value should be between 0 and 1.
              minimum: 0
              maximum: 1
        - $ref: '#/components/schemas/MaterialBase'
    Plastic:
      type: object
      description: Radiance opaque material.
      required:
        - type
        - r_reflectance
        - g_reflectance
        - b_reflectance
      allOf:
        - properties:
            type:
              type: string
              description: Material type
              enum:
                - Plastic
            r_reflectance:
              type: number
              description: Reflectance for red. The value should be between 0 and 1.
              minimum: 0
              maximum: 1
            g_reflectance:
              type: number
              description: Reflectance for green. The value should be between 0 and 1.
              minimum: 0
              maximum: 1
            b_reflectance:
              type: number
              description: Reflectance for blue. The value should be between 0 and 1.
              minimum: 0
              maximum: 1
            specularity:
              type: number
              description: |
                Fraction of specularity. Specularity fractions greater than 0.1 are not realistic
                (Default 0)
              minimum: 0
              maximum: 1
              default: 0
            roughness:
              type: number
              description: |
                Roughness is specified as the rms slope of surface facets. A
                value of 0 corresponds to a perfectly smooth surface, and a value of 1
                would be a very rough surface. Roughness values greater than 0.2 are not
                very realistic.
              minimum: 0
              maximum: 1
              default: 0
            modifier:
              description: Placeholder for modifier.
              type: string
              default: void
        - $ref: '#/components/schemas/MaterialBase'
    Transparent:
      type: object
      description: Simplified Radiance transparent material.
      required:
        - name
        - transmittance
      allOf:
        - properties:
            type:
              type: string
              description: Material type
              enum:
                - Transparent
            transmittance:
              type: number
              description: Material transmittance. The value should be between 0 and 1.
              minimum: 0
              maximum: 1
        - $ref: '#/components/schemas/MaterialBase'
    RadianceParameters:
      type: object
      description: |
        Parameters for Radiance-based simulations. You can use base to set the values based on
        preset values and then use overwrite to overwrite custom parameters.
      properties:
        base:
          type: string
          description: 'Base input value to set the initial parameters. The default value is set to `default` which will use Radiance''s default parameters. Other options are `low`, `medium` and `high`.'
          enum:
            - default
            - low
            - medium
            - high
          default: default
        overwrite:
          type: string
          description: |
            A string of Radiance parameters to overwrite base values. e.g. `"-aa 0.01 -ad 4800"`
      example:
        base: default
        overwrite: '-ab 5 -aa 0.01 -ad 4800'
    DaylightFactor:
      description: A grid-based simulation schema.
      type: object
      required:
        - type
        - grids
      allOf:
        - properties:
            type:
              description: Simulation type.
              type: string
              enum:
                - DaylightFactor
            grids:
              description: A collection of sensor-grid ids.
              type: array
              items:
                $ref: '#/components/schemas/UUID'
            models:
              description: A collection of model ids.
              type: array
              items:
                $ref: '#/components/schemas/UUID'
            radiance_parameters:
              $ref: '#/components/schemas/RadianceParameters'
        - $ref: '#/components/schemas/Simulation'
    PointInTime:
      description: A grid-based simulation schema.
      type: object
      required:
        - type
        - sky
        - output_type
      allOf:
        - properties:
            type:
              description: Simulation type.
              type: string
              enum:
                - PointInTime
            sky:
              description: Radiance sky.
              oneOf:
                - $ref: '#/components/schemas/CIESky'
                - $ref: '#/components/schemas/ClimateBasedSky'
            output_type:
              description: Simulation output type. Options are `illuminance` and `radiation`.
              type: string
              enum:
                - illuminance
                - radiation
              default: illuminance
        - $ref: '#/components/schemas/DaylightFactor'
    CIESky:
      description: Standard CIE sky.
      type: object
      required:
        - location
        - datetime
      properties:
        north:
          description: |
            A number between -360 and 360 that represents the degrees off from
            the y-axis to make North. The default North direction is set to the
            Y-axis. Default is 0 degrees.
          type: number
          minimum: -360
          maximum: 360
          default: 0
        location:
          $ref: '#/components/schemas/Location'
        datetime:
          $ref: '#/components/schemas/DateTime'
        sky_type:
          description: |
            CIE Sky Type. `+s` = is sunnyWSun, `-s` = sunnyNoSun, `+i` = intermWSun,
            `-i` = intermNoSun, `-c` = cloudySky , `-u` = uniformSky
          type: string
          enum:
            - +s
            - '-s'
            - +i
            - '-i'
            - '-c'
            - '-u'
          default: +s
    ClimateBasedSky:
      description: Point-in-time climate-based sky.
      type: object
      required:
        - location
        - datetime
        - direct_irradiance
        - diffuse_irradiance
      properties:
        north:
          description: |
            A number between -360 and 360 that represents the degrees off from
            the y-axis to make North. The default North direction is set to the
            Y-axis. Default is 0 degrees.
          type: number
          minimum: -360
          maximum: 360
          default: 0
        location:
          $ref: '#/components/schemas/Location'
        datetime:
          $ref: '#/components/schemas/DateTime'
        direct_irradiance:
          description: Direct-normal irradiance in W/m^2.
          type: number
          minimum: 0
        diffuse_irradiance:
          description: Diffuse-horizontal irradiance in W/m^2.
          type: number
          minimum: 0
    Simulation:
      description: Pollination simulation.
      type: object
      required:
        - id
        - name
      properties:
        name:
          $ref: '#/components/schemas/ValidString'
        id:
          $ref: '#/components/schemas/UUIDReadOnly'
        depends_on:
          description: |
            Name of other simulations that this simulation depends on. This simulation will be
            executed after all dependencies are finished.
          type: array
          items:
            type: string
        logs:
          description: Link to related logs to this simulation.
          type: string
          format: url
        outputs:
          description: |
            List of simulation outputs. Each output has a link to access the output
            resource. The url will only be functional if the execution of simulation is
            successful otherwise it will throw a `404 Not Found` error.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Action'
        actions:
          description: A collection of actions for this simulation.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Action'
        status:
          $ref: '#/components/schemas/SimulationStatus'
      example:
        name: market_place_comfort_study
        id: 123e4567-e89b-12d3-a456-426655440000
        dependes_on:
          - market_place_radiation_simulation
          - market_place_airflow_simulation
        logs: 'https://api.pollination.cloud/simulations/123e4567-e89b-12d3-a456-426655440000/logs'
        outputs:
          - verb: post
            description: '*.res file generated by Radiance.'
            payload:
              output: file
            url: 'https://api.pollination.cloud/simulations/123e4567-e89b-12d3-a456-426655440000/outputs'
          - verb: post
            description: List of list of values for each sensor-grid.
            payload:
              output: values
            url: 'https://api.pollination.cloud/simulations/123e4567-e89b-12d3-a456-426655440000/outputs'
          - verb: post
            description: List of average values for each sensor-grid.
            payload:
              output: average
            url: 'https://api.pollination.cloud/simulations/123e4567-e89b-12d3-a456-426655440000/outputs'
        actions:
          - description: Start the simulation.
            verb: put
            payload:
              action: start
            url: api.pollination.cloud/simulations/123e4567-e89b-12d3-a456-42665544/actions
          - description: Stop the simulation.
            verb: put
            payload:
              action: stop
            url: api.pollination.cloud/simulations/123e4567-e89b-12d3-a456-42665544/actions
    SimulationEvent:
      description: Simulation event
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          description: Status of simulation/ workflow.
          enum:
            - Created
            - Started
            - Canceled
            - Finished
        timestamp:
          $ref: '#/components/schemas/TimeStamp'
        message:
          type: string
      example:
        - status: Created
          timestamp: '2019-03-11T18:47:13Z'
        - status: Started
          timestamp: '2019-03-11T18:47:20Z'
        - status: Canceled
          timestamp: '2019-03-11T18:47:30Z'
        - status: Started
          timestamp: '2019-03-11T18:48:25Z'
        - status: Finished
          timestamp: '2019-03-11T19:09:21Z'
    SimulationStatus:
      description: Status for a single simulation.
      type: object
      readOnly: true
      properties:
        status:
          type: string
          enum:
            - Created
            - Started
            - Canceled
            - Failed
            - Succeeded
        history:
          type: array
          items:
            $ref: '#/components/schemas/SimulationEvent'
    Action:
      type: object
      description: A HTTP action.
      required:
        - url
      properties:
        description:
          description: Human readable description for this action.
          type: string
        verb:
          description: HTTP verb
          type: string
          enum:
            - head
            - get
            - post
            - patch
            - put
            - delete
          default: put
        payload:
          description: HTTP call payload
          type: object
        url:
          type: string
          format: url
      example:
        verb: put
        payload:
          action: stop
        url: 'https://api.pollination.cloud/simulations/1234-5678-910/actions'
    DateTime:
      description: DateTime
      type: object
      properties:
        month:
          description: A value for month between `1`-`12`. Default is `1`.
          type: integer
          minimum: 1
          maximum: 12
          default: 1
        day:
          type: integer
          description: A value for day between `1`-`31`. Default is `1`.
          minimum: 1
          maximum: 31
          default: 1
        hour:
          type: integer
          description: A value for hour between `0`-`23`. Default is `0`.
          minimum: 0
          maximum: 23
          default: 0
        minute:
          type: integer
          description: A value for month between `0`-`59`. Default is `0`.
          minimum: 0
          maximum: 59
          default: 0
        is_leap_year:
          description: |
            A boolean to indicate if datetime is for a leap year. Default is `false`.
          type: boolean
          default: false
    Error:
      type: object
      description: Error response schema.
      required:
        - message
      properties:
        code:
          type: integer
          description: |
            Internal code error. See pollination.cloud/api/response-codes for more information.
        doc_url:
          type: string
          description: A URL to more information about the error code reported.
          default: pollination.cloud/api/response-codes
        type:
          type: string
          enum:
            - Forbidden
            - Unauthorized
            - InvalidParameter
            - MissingParameter
            - RuntimeError
        param:
          type: string
          description: 'If the error is parameter-specific, the parameter related to the error.'
        message:
          type: string
          description: |
            A human-readable message providing more details about the error and if you are
            lucky a helpful suggestion to address the error.
      example:
        code: 0
        doc_url: pollination.cloud/api/response-codes
        type: Unauthorized
        message: A valid token is required. Current token is expired.
    ErrorResponse:
      type: object
      description: Error response schema.
      required:
        - errors
      properties:
        message:
          type: string
          description: A human readble error message.
        errors:
          type: array
          description: Collection of errors.
          items:
            $ref: '#/components/schemas/Error'
      example:
        message: Invalid token.
        erros:
          - code: 0
            doc_url: pollination.cloud/api/response-codes
            type: Unauthorized
            message: A valid token is required. Current token is expired.
    Link:
      type: object
      required:
        - name
        - url
      properties:
        name:
          $ref: '#/components/schemas/ValidString'
        description:
          type: string
        url:
          type: string
          format: url
      example:
        name: result_file
        description: '*.res file generated by Radiance.'
        url: 'https://api.pollination.cloud/simulation/1234-5678-910/outputs/result-file'
    Location:
      description: Location
      type: object
      properties:
        latitude:
          description: Location latitude between `-90` and `90`. Default is `0`.
          type: number
          minimum: -90
          maximum: 90
          default: 0
        longitude:
          description: |
            Location longitude between `-180` (west) and `180` (east). Default is `0`.
          type: number
          minimum: -180
          maximum: 180
          default: 0
        time_zone:
          description: |
            Time zone between `-12` hours (west) and `12` hours (east). Default is `0`.
          type: number
          minimum: -12
          maximum: 12
          default: 0
        elevation:
          description: A number for elevation of the location. Default is `0`
          type: number
          minimum: 0
          default: 0
    Log:
      description: Log
      type: object
      required:
        - timestamp
        - source
        - message
      properties:
        timestamp:
          $ref: '#/components/schemas/TimeStamp'
        source:
          description: Source process.
          type: object
          properties:
            name:
              type: string
              description: Name of source process.
            id:
              type: string
              format: uuid
              description: Id of source process.
        message:
          description: Log message.
          type: string
      example:
        timestamp: '2019-03-11T18:47:13Z'
        source: 'daylight_factor_simulation::123e4567-e89b-12d3-a456-426655440000'
        message: Simulation finished successfully!
    TimeStamp:
      description: Timestamp
      type: string
      format: datetime
      example: '2019-03-11T18:47:13Z'
    UUID:
      description: A resource identifier string
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426655440000
    UUIDReadOnly:
      description: A resource identifier string
      type: string
      format: uuid
      readOnly: true
      example: 123e4567-e89b-12d3-a456-426655440000
    ValidString:
      description: A text input with no white space or special character
      type: string
      pattern: '^[.A-Za-z0-9_-]*$'
    Workflow:
      type: object
      description: Pollination workflow schema
      required:
        - type
        - name
        - simulations
      properties:
        type:
          type: string
          enum:
            - Workflow
        name:
          $ref: '#/components/schemas/ValidString'
        spec:
          type: object
          description: Workflow specifications.
          readOnly: true
          properties:
            parallelism:
              description: |
                Parallelism limits the max total parallel pods that can execute at the same
                time in a workflow
              type: integer
        simulations:
          description: List of workflow simulations
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/DaylightFactor'
              - $ref: '#/components/schemas/PointInTime'
        actions:
          description: List of available actions for workflow.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Action'
        status:
          $ref: '#/components/schemas/WorkflowStatus'
    WorkflowEvent:
      description: Event
      type: object
      properties:
        status:
          description: Task status
          type: string
          enum:
            - Submitted
            - Started
            - Succeeded
            - Failed
        timestamp:
          $ref: '#/components/schemas/TimeStamp'
    WorkflowStatus:
      type: object
      description: Workflow status based on each simulation status.
      readOnly: true
      properties:
        status:
          type: object
          description: Status of workflow simulations.
          properties:
            Started:
              type: array
              description: Started simulations.
              items:
                type: object
                properties:
                  name:
                    description: Simulation name.
                    type: string
                  id:
                    description: Simulation id.
                    type: string
                    format: uuid
            Canceled:
              type: array
              description: Canceled simulations.
              items:
                type: object
                properties:
                  name:
                    description: Simulation name.
                    type: string
                  id:
                    description: Simulation id.
                    type: string
                    format: uuid
            Failed:
              type: array
              description: Failed simulations.
              items:
                type: object
                properties:
                  name:
                    description: Simulation name.
                    type: string
                  id:
                    description: Simulation id.
                    type: string
                    format: uuid
            Succeeded:
              type: array
              description: Succeeded simulations.
              items:
                type: object
                properties:
                  name:
                    description: Simulation name.
                    type: string
                  id:
                    description: Simulation id.
                    type: string
                    format: uuid
        history:
          description: List of events for workflow.
          type: array
          items:
            $ref: '#/components/schemas/SimulationEvent'
  responses:
    Accepted:
      description: Accepted
      headers:
        Retry-After:
          schema:
            type: integer
            default: 30
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - url
              - status
              - submitted_at
            properties:
              id:
                type: string
                description: Id of the newly submitted resource.
                format: uuid
              url:
                type: string
                description: The URL to access the resource.
              timestamp:
                $ref: '#/components/schemas/TimeStamp'
              message:
                type: string
                description: A human readble message.
    Created:
      description: Created successfuly
      headers:
        Location:
          schema:
            type: string
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the newly created resource.
                format: uuid
              message:
                type: string
                description: A human readble message.
            example:
              id: 123e4567-e89b-12d3-a456-426655440000
              message: The resource is created successfuly. Use header Location to access the resource.
    Forbidden:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Permission denied.
            erros:
              - code: 6
                doc_url: pollination.cloud/api/response-codes
                type: Forbidden
                message: Permission denied.
    InProcessModel:
      description: Processing
      headers:
        Retry-After:
          schema:
            type: integer
            default: 60
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InProcessModel'
    Invalid:
      description: Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Missing required paramter.
            erros:
              - code: 2
                doc_url: pollination.cloud/api/response-codes
                type: MissingParameter
                message: Missing required paramter.
                param: id
    NotFound:
      description: Resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Resource was not found.
            erros:
              - code: 6
                doc_url: pollination.cloud/api/response-codes
                type: InvalidParameter
                message: The resource was not found.
    Refused:
      description: The request is refused
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: The request is refused.
            erros:
              - code: 2
                doc_url: pollination.cloud/api/response-codes
                type: Forbidden
                message: The resource is currently in-use and cannot be deleted.
    RetrivedIds:
      description: Retrived
      headers:
        Link:
          $ref: '#/components/headers/LinkHeader'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UUID'
            example:
              - 123e4567-e89b-12d3-a456-426655440000
              - 987e4567-e89b-15t3-a456-426655440200
    RetrivedModels:
      description: Retrived
      headers:
        Link:
          $ref: '#/components/headers/LinkHeader'
      content:
        application/json:
          schema:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/InProcessModel'
                - $ref: '#/components/schemas/LinkedModel'
    RetrivedSimulations:
      description: Retrived
      headers:
        Link:
          $ref: '#/components/headers/LinkHeader'
      content:
        application/json:
          schema:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/DaylightFactor'
                - $ref: '#/components/schemas/PointInTime'
    RetrivedWorkflows:
      description: Retrived
      headers:
        Link:
          $ref: '#/components/headers/LinkHeader'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Workflow'
    Succeed:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: A human readble error message.
            example:
              message: Success!
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unsupported:
      description: Unsupported media type content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    resourceId:
      in: path
      name: id
      description: The resource identifier string
      required: true
      schema:
        type: string
        format: uuid
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
    LinkHeader:
      description: |
        [Link header](#section/Pagination/Link-header). It includes pagination information.
      schema:
        type: string
  requestBodies:
    Action:
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                enum:
                  - start
                  - stop
      required: true
    Model:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Model'
              - $ref: '#/components/schemas/FaceByFaceModel'
      required: true
    SensorGrid:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SensorGrid'
      description: SensorGrid
      required: true
    Simulation:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/DaylightFactor'
              - $ref: '#/components/schemas/PointInTime'
      required: true
    Workflow:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Workflow'
      required: true
  securitySchemes:
    JWT:
      description: |
        JSON Web Token (JWT).
        Usage format: `Bearer <JWT>`
      type: http
      scheme: bearer
      bearerFormat: JWT
